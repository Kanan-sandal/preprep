Optimal Approach (In-place using First Row & Column)
Idea:
Use first row and first column as markers instead of extra memory.
Use extra boolean variables to track whether first row/column themselves should be zero.


Steps:
Check if first row has zero → firstRowZero
Check if first column has zero → firstColZero
Iterate rest of matrix: if matrix[i][j]==0 → mark matrix[i][0]=0 and matrix[0][j]=0
Iterate matrix (excluding first row/column): if matrix[i][0]==0 || matrix[0][j]==0 → set matrix[i][j]=0
Update first row and column if needed


code:
class Solution{
public:
    void setZeroes(vector<vector<int>>& matrix){
        int m=matrix.size();
        int n=matrix[0].size();
        bool firstrow=false;
        bool firstcol=false;
        for(int j=0;j<n;j++) if(matrix[0][j]==0) firstrow=true;
        for(int i=0;i<m;i++) if(matrix[i][0]==0) firstcol=true;
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if(matrix[i][j]==0){
                    matrix[i][0]=0;
                    matrix[0][j]=0;
                }
            }
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if(matrix[i][0]==0 || matrix[0][j]==0){
                    matrix[i][j]=0;
                }
            }
        }
        if(firstrow) for(int j=0;j<n;j++) matrix[0][j]=0;
        if(firstcol) for(int i=0;i<m;i++) matrix[i][0]=0;
    }
};


Dry Run
matrix = [[1,1,1],[1,0,1],[1,1,1]]

Mark zeros:
matrix[1][0]=0, matrix[0][1]=0 → matrix becomes
[[1,0,1],[0,0,1],[1,1,1]]

Set zeros:
matrix[1][0]=0, matrix[1][1]=0, matrix[1][2]=1 → update row 1
matrix[0][1]=0, matrix[1][1]=0, matrix[2][1]=1 → update col 1

Final matrix=[[1,0,1],[0,0,0],[1,0,1]]


Complexity
Time: O(m*n) → iterate matrix twice
Space: O(1) → in-place
