Approach (Min-Heap)
Sort meetings by start time.
Use a min-heap (priority_queue in C++ with greater<>) to track ongoing meetings by their end time.
For each meeting:
If the earliest ending meeting ends before or at current start → pop from heap (room freed).
Always push the current meeting’s end time into heap.
At any point, heap size = number of rooms in use.
Answer = max heap size.


code:
class Solution {
  public:
    int minMeetingRooms(vector<int> &start, vector<int> &end) {
        int n=start.size();
        vector<pair<int,int>> intervals;
        for(int i=0;i<n;i++){
            intervals.push_back({start[i],end[i]});
        }
        if(intervals.empty()) return 0;
        sort(intervals.begin(),intervals.end());
        priority_queue<int,vector<int>,greater<int>> minheap;
        minheap.push(intervals[0].second);
        
        for(int i=1;i<n;i++){
            if(intervals[i].first>=minheap.top()){
                minheap.pop();
            }
            minheap.push(intervals[i].second);
        }
         return minheap.size();
    }
};



Dry Run (start = [2,9,6], end = [4,12,10])
Meetings after sorting = [(2,4), (6,10), (9,12)]
Push 4 → heap = [4]
(6,10): 6 ≥ 4 → pop 4, push 10 → heap = [10]
(9,12): 9 < 10 → push 12 → heap = [10,12]
Final heap size = 2

Complexity
Sorting = O(n log n)
Heap operations = O(n log n)
Space = O(n)



Approaches:
1. Sorting + Two Pointers (Optimal)
Idea:
Sort start times and end times separately.
Use two pointers:
i → pointer over start
j → pointer over end
Traverse:
If start[i] < end[j] → a new meeting starts before the earliest ending meeting ends → need a new room.
Else (start[i] >= end[j]) → one meeting ended, free up a room → move j.
This avoids using heaps and runs in O(n log n) time (sorting dominates).



code:
class Solution {
  public:
    int minMeetingRooms(vector<int> &start, vector<int> &end) {
        int n=start.size();
        sort(start.begin(),start.end());
        sort(end.begin(),end.end());
        
        int rooms=0,maxrooms=0;
        int i=0,j=0;
        while(i<n && j<n){
            if(start[i]<end[j]){
                rooms++;
                i++;
            }else{
                rooms--;
                j++;
            }
            maxrooms=max(maxrooms,rooms);
        }
        return maxrooms;
    }
};



Dry Run (Example: start = [2,9,6], end = [4,12,10])
After sorting:
start = [2,6,9], end = [4,10,12]
Step 1: 2 < 4 → room = 1
Step 2: 6 < 4? No → end frees → room = 0, then start 6 → room = 1
Step 3: 9 < 10 → room = 2
Answer = 2



Complexity
Sorting → O(n log n)
Traversal → O(n)
Space → O(1) (just pointers, no heap)
