Approach
If root is NULL → depth = 0.
Otherwise → depth = 1 + max(depth(left), depth(right)).
Use recursion (DFS).


code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution{
public:
    int maxDepth(TreeNode* root){
        if(!root) return 0;
        else return 1+max(maxDepth(root->left),maxDepth(root->right));
    }
};



Dry Run
Input Tree:

      1
     / \
    2   3
   / \
  4   5


Steps:
maxDepth(1) = 1 + max(maxDepth(2), maxDepth(3))
maxDepth(2) = 1 + max(maxDepth(4), maxDepth(5))
maxDepth(4) = 1 (leaf)
maxDepth(5) = 1 (leaf)
maxDepth(2) = 1 + max(1,1) = 2
maxDepth(3) = 1 (leaf)
maxDepth(1) = 1 + max(2,1) = 3 
Output: 3


Complexity
Time: O(n) (visit every node once).
Space: O(h) recursion stack (h = tree height, worst O(n) for skewed tree).
