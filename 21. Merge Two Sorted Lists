Approach
Use a dummy node for simplicity.
Compare heads of both lists, attach smaller node, move pointer.
Finally attach remaining nodes.


code:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution{
public:
    ListNode* mergeTwoLists(ListNode* l1,ListNode* l2){
        ListNode dummy(-1);
        ListNode* tail=&dummy;
        while(l1 && l2){
            if(l1->val<l2->val){
                tail->next=l1;
                l1=l1->next;
            }else{
                tail->next=l2;
                l2=l2->next;
            }
            tail=tail->next;
        }
        tail->next=(l1?l1:l2);
       return dummy.next;
    }
};


Dry Run Example
l1 = 1 → 3 → 5
l2 = 2 → 4 → 6
dummy → -1 → NULL, tail at dummy
Compare 1 vs 2 → pick 1 → dummy → -1 → 1
Compare 3 vs 2 → pick 2 → -1 → 1 → 2
Compare 3 vs 4 → pick 3 → -1 → 1 → 2 → 3
Compare 5 vs 4 → pick 4 → -1 → 1 → 2 → 3 → 4
Compare 5 vs 6 → pick 5 → -1 → 1 → 2 → 3 → 4 → 5
Leftover 6 → attach → -1 → 1 → 2 → 3 → 4 → 5 → 6
Return dummy.next (skips -1). 


⏱ TC: O(m + n) (m = length of l1, n = length of l2)
💾 SC: O(1)




RECURSIVE CODE:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1) return l2;
        if(!l2) return l1;

        if(l1->val<l2->val){
            l1->next=mergeTwoLists(l1->next,l2);
            return l1;
        }else{
            l2->next=mergeTwoLists(l1,l2->next);
            return l2;
        }
    }
};



How it works (dry run)
Example:
l1 = 1 → 3 → 5
l2 = 2 → 4 → 6
Compare 1 and 2 → 1 smaller → set 1->next = mergeTwoLists(3→5, 2→4→6)
Inside that call: compare 3 and 2 → 2 smaller → set 2->next = mergeTwoLists(3→5, 4→6)
Inside that call: compare 3 and 4 → 3 smaller → set 3->next = mergeTwoLists(5, 4→6)
Compare 5 and 4 → 4 smaller → set 4->next = mergeTwoLists(5, 6)
Compare 5 and 6 → 5 smaller → set 5->next = mergeTwoLists(NULL, 6)
Base case: l1 == NULL → return 6.
Final merged list:
1 → 2 → 3 → 4 → 5 → 6




🕒 Time Complexity
Each node is visited exactly once → O(m + n)
where m = length of l1, n = length of l2.
📦 Space Complexity
O(m + n) recursion stack (worst case, if lists are long and skewed).
The iterative dummy-node solution is O(1) extra space, so that one is better for very large lists.
