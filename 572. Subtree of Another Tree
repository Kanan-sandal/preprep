Approach
Traverse main tree (root).
If a node matches subRoot->val, check if entire subtree matches using helper function isSameTree.



code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution{
public:
    bool isSubtree(TreeNode* root,TreeNode* subRoot){
        if(!root) return false;
        if(isSameTree(root,subRoot)) return true;
        return isSubtree(root->left,subRoot) || isSubtree(root->right,subRoot);
    }
private:
    bool isSameTree(TreeNode* a,TreeNode* b){
        if(!a && !b) return true;
        if(!a || !b) return false;
        if(a->val != b->val) return false;
        return isSameTree(a->left,b->left) && isSameTree(a->right,b->right);
    }
};


Dry Run
root = [3,4,5,1,2]
subRoot = [4,1,2]
root=3 → not same as subRoot
go left → root=4 → matches subRoot → check subtree → identical → return true
Output: true


Complexity
Time: O(m * n) worst case (m = root nodes, n = subRoot nodes).
Space: O(h) recursion stack.
