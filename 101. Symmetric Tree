Approach
Mirror check: left.val == right.val, and subtrees symmetric.
Can do recursion or iteration.


code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution{
public:
    bool isMirror(TreeNode* t1,TreeNode* t2){
        if(!t1 && !t2) return true;
        if(!t1 || !t2) return false;
        return (t1->val == t2->val) &&
        isMirror(t1->left,t2->right) &&
        isMirror(t1->right,t2->left);
    }
    bool isSymmetric(TreeNode* root){
        if(!root) return true;
        return isMirror(root->left,root->right);
    }
};



Dry Run

Input:

    1
   / \
  2   2
 / \ / \
3  4 4  3

Compare (2,2) → ok.
Compare (3,3) & (4,4) → ok.
Final → true.


⏱ Complexity
Time: O(n) (visit all nodes).
Space: O(h) (recursion stack, worst O(n)).
