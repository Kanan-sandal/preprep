Approach
Use a queue (BFS).
Push root → process level by level.
For each level, record node values, push children.


code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution{
public:
    vector<vector<int>> levelOrder(TreeNode* root){
        vector<vector<int>> res;
        if(!root) return res;;
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            int size=q.size();
            vector<int> level;
            for(int i=0;i<size;i++){
                TreeNode* node=q.front();
                q.pop();
                level.push_back(node->val);

                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            res.push_back(level);
        }
        return res;
    }
};



Dry Run

Input:

    3
   / \
  9  20
     / \
    15  7


Queue process:
Level 1: [3]
Level 2: [9, 20]
Level 3: [15, 7]
Output = [[3], [9,20], [15,7]].



⏱ Complexity
Time: O(n) (visit all nodes once).
Space: O(n) (queue can hold max one level).
