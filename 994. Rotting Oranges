class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int rows=grid.size();
        int cols=grid[0].size();
        queue<pair<int,int>> q;
        int fresh=0;
        for(int r=0;r<rows;r++){
            for(int c=0;c<cols;c++){
                if(grid[r][c]==2){
                    q.push({r,c});
                }else if(grid[r][c]==1){
                    fresh++;
                }
            }
        }
        if(fresh==0) return 0;
        int minutes=0;
        vector<pair<int,int>> dir={{0,1},{0,-1},{1,0},{-1,0}};
        while(!q.empty() && fresh>0){
            minutes++;
            int size=q.size();
            for(int i=0;i<size;i++){
                pair<int,int> current=q.front();q.pop();
                for(const auto& d:dir){
                    int newrow=current.first+d.first;
                    int newcol=current.second+d.second;

                    if(newrow>=0 && newrow<rows && newcol<cols && newcol>=0 && grid[newrow][newcol]==1){
                        grid[newrow][newcol]=2;
                        fresh--;
                        q.push({newrow,newcol});
                    }
                }
            }
        }
        if(fresh==0){
            return minutes;
        }else{
            return -1;
        }
    }
};
























































class Solution{
public:
    int orangesRotting(vector<vector<int>> grid){
        int rows=grid.size();
        int cols=grid[0].size();
        int fresh=0;
        queue<pair<int,int>> q;

        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==2){
                    q.push({i,j});
                }else if(grid[i][j]==1){
                    fresh++;
                }
            }
        }
        if(fresh==0) return 0;
        vector<pair<int,int>> dir={{1,0},{-1,0},{0,1},{0,-1}};
        int min=0;
        while(!q.empty() && fresh>0){
            min++;
            int size=q.size();
            for(int i=0;i<size;i++){
                pair<int,int> current=q.front();q.pop();

                for(const auto& d:dir){
                    int newrow=current.first+d.first;
                    int newcol=current.second+d.second;

                    if(newrow>=0 && newcol>=0 && newrow<rows && newcol<cols && grid[newrow][newcol]==1){
                        grid[newrow][newcol]=2;
                        fresh--;
                        q.push({newrow,newcol});
                    }
                }
            }
        }
        if(fresh==0){
            return min;
        }else{
            return -1;
        }
    }
};





