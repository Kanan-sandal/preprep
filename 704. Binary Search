Approach (Standard Binary Search)
Use two pointers: left=0, right=n-1.
While left <= right:
Compute mid = left + (right-left)/2.
If nums[mid] == target → return mid.
If nums[mid] < target → search right half (left = mid+1).
Else → search left half (right = mid-1).
If not found, return -1.


code:
class Solution{
public:
    int search(vector<int>& nums,int target){
        int left=0,right=nums.size()-1;
        while(left<=right){
            int mid=left+(right-left)/2;
            if(nums[mid]==target) return mid;
            else if(nums[mid]<target) left=mid+1;
            else right=mid-1;
        }
        return -1;
    }
};



Dry Run
Input: nums=[-1,0,3,5,9,12], target=9
left=0, right=5 → mid=2 → nums[2]=3 < 9 → search right.
left=3, right=5 → mid=4 → nums[4]=9   found.
Output = 4



Complexity
Time: O(log n)
Space: O(1)
