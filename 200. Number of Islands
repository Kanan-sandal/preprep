Approach
Traverse the grid.
When you see a '1', that’s a new island → increment count.
Then DFS/BFS flood-fill to mark all connected land as visited (turn to '0' or use visited[][]).


code:
class Solution{
public:
    void dfs(vector<vector<char>>&grid,int i,int j){
        int m=grid.size();
        int n=grid[0].size();
        if(i<0 || j<0 || i>=m || j>=n || grid[i][j]=='0'){
            return;
        }
        grid[i][j]='0';
        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
        dfs(grid,i,j+1);
        dfs(grid,i,j-1);
    }
    int numIslands(vector<vector<char>>& grid){
        int count=0;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]=='1'){
                    count++;
                    dfs(grid,i,j);
                }
            }
        }
        return count;
    }
};



Dry Run
Grid:

11110
11010
11000
00000

Start at (0,0): sees 1 → island=1 → DFS wipes connected region.
Next 1 at (1,2): already visited.
End result → 1 island.



⏱ Complexity
Time: O(m·n) (visit each cell once).
Space: O(m·n) recursion stack in worst case (all land).













































class Solution{
public:
    void dfs(vector<vector<char>>& grid,int i,int j){
        int m=grid.size();
        int n=grid[0].size();
        if(i<0 || j<0 || i>=m || j>=n || grid[i][j]=='0'){
            return ;
        }
        grid[i][j]='0';
        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
        dfs(grid,i,j+1);
        dfs(grid,i,j-1);
    }
    int numIslands(vector<vector<char>>& grid){
        if(grid.empty()) return 0;
        int m=grid.size();
        int n=grid[0].size();
        int count=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1'){
                    count++;
                    dfs(grid,i,j);
                }
            }
        }
        return count;
    }
};
