Optimal Approach (Hashing)
Idea:
Use a hash map to store numbers and their indices.
While iterating, check if target - nums[i] exists in the map.
If yes, return [map[target-nums[i]], i].


Steps:
Initialize unordered_map<int,int> mp.
Iterate i from 0 to n-1:
complement = target - nums[i]
If complement in map → return [mp[complement], i]
Else → store nums[i] in map: mp[nums[i]] = i

code:
class Solution{
public:
    vector<int> twoSum(vector<int>& nums,int target){
        int n=nums.size();
        unordered_map<int,int> mp;
        for(int i=0;i<n;i++){
            int comp=target-nums[i];
            if(mp.find(comp)!=mp.end()){
                return{mp[comp],i};
            }
            mp[nums[i]]=i;
        }
        return {};
    }
};

Dry Run:
nums = [2,7,11,15], target = 9
i=0: complement=7 → not in map → mp[2]=0
i=1: complement=2 → 2 in map → return [0,1]


Complexity:
Time: O(n) → one pass through array
Space: O(n) → hashmap storage



















class Solution{
public:
    vector<int> twoSum(vector<int>& nums,int target){
        int n=nums.size();
        unordered_map<int,int> mp;
        for(int i=0;i<n;i++){
            int comp=target-nums[i];
            if(mp.find(comp)!=mp.end()){
                return {mp[comp],i};
            }
            mp[nums[i]]=i;
        }
        return {};
    }
};
