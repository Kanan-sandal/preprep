Approach
Count frequency (unordered_map).
Use min-heap of size k storing {freq, num}.
Pop if heap > k.


code:
class Solution{
public:
    vector<int> topKFrequent(vector<int>& nums,int k){
        unordered_map<int,int> freq;
        for(int n:nums) freq[n]++;

        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> minheap;
        for(auto& [num,count]:freq){
            minheap.push({count,num});
            if(minheap.size()>k){
                minheap.pop();
            }
        }
        vector<int> res;
        while(!minheap.empty()){
            res.push_back(minheap.top().second);
            minheap.pop();
        }
        return res;
    }
};


Dry Run
Input: nums=[1,1,1,2,2,3], k=2
Freq: {1→3, 2→2, 3→1}
Push (3,1),(2,2),(1,3) → pop smallest → heap keeps [(2,2),(3,1)].
Answer = [2,1].


TC & SC
Time: O(n log k)
Space: O(n)
