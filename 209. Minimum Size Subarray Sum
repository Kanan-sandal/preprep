Approach (Sliding Window - Expand & Shrink)
Use two pointers (left, right).
Keep adding nums[right] to current sum.
Once sum ≥ target, shrink window from left while sum still ≥ target.
Track min length.


code:
class Solution{
public:
    int minSubArrayLen(int target,vector<int>& nums){
        int n=nums.size();
        int left=0,sum=0,minlen=INT_MAX;

        for(int right=0;right<n;right++){
            sum+=nums[right];

            while(sum>=target){
                minlen=min(minlen,right-left+1);
                sum-=nums[left];
                left++;
            }
        }
        if(minlen==INT_MAX){
            return 0;
        }else{
            return minlen;
        }
    }
};



Dry Run
Input: target=7, nums=[2,3,1,2,4,3]
Expand → [2,3,1,2] sum=8 → valid → minLen=4
Shrink → [3,1,2] sum=6 → not valid
Expand → [1,2,4] sum=7 → valid → minLen=3
Expand → [4,3] sum=7 → valid → minLen=2 
Output = 2



Complexity
Time: O(n)
Space: O(1)
